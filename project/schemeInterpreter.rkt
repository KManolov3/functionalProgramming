#lang racket

(define (search p l)
  (and (not (null? l))
       (or (p (car l))
           (search p (cdr l)))))

(define the-empty-env '())

(define (assoc key alist)
  (search (lambda (key-value-pair)
            (and (equal? (car key-value-pair) key)
                 key-value-pair))
          alist))

(define (del-assoc key alist)
  (filter (lambda (key-value-pair)
            (not (equal? (car key-value-pair) key)))
          alist))

(define (add-assoc key value alist)
  (cons (cons key value)
        (del-assoc key alist)))

(define (interpret code)
  (interpret-env code the-empty-env)
  )

(define (interpret-env code env)
  (if (> (length code) 1)
      (interpret-env (cdr code) (add-to-env (list-ref (car code) 1) (cddar code) env))
      (evaluate (car code) env)
      )
  )

(define (add-to-env definitionSignature value env)
  (if (list? definitionSignature)
      (add-func-to-env (car definitionSignature) (cdr definitionSignature) value env)
      (add-constant-to-env definitionSignature (car value) env)
      )
  )

(define (add-func-to-env name args value env)
  (add-assoc name (list args value) env)
  )

(define (add-constant-to-env name value env)
  (add-assoc name (evaluate value env) env)
  )

(define (atom? clause)
  (not (list? clause))
  )

(define (non-empty-list? clause)
  (and (list? clause)
       (not (null? clause))
       )
  )

(define (evaluate clause env)
; (and
  ; (println clause)
   ;(println env)
   (if (or (atom? clause) (null? clause))
       (if (defined-symbol? clause env)
           (get-value clause env)
           clause)
       (let ((clause-op (evaluate (car clause) env)))
         (cond ((equal? '+ clause-op) (apply + (map (curryr evaluate env) (cdr clause))))
               ((equal? '- clause-op) (apply - (map (curryr evaluate env) (cdr clause))))
               ((equal? '* clause-op) (apply * (map (curryr evaluate env) (cdr clause))))
               ((equal? '/ clause-op) (apply / (map (curryr evaluate env) (cdr clause))))
               ((equal? 'quotient clause-op) (apply quotient (map (curryr evaluate env) (cdr clause))))
               ((equal? 'remainder clause-op) (apply remainder (map (curryr evaluate env) (cdr clause))))
               ((equal? 'max clause-op) (apply max (map (curryr evaluate env) (cdr clause))))
               ((equal? 'min clause-op) (apply min (map (curryr evaluate env) (cdr clause))))
               ((equal? '> clause-op) (apply > (map (curryr evaluate env) (cdr clause))))
               ((equal? '>= clause-op) (apply >= (map (curryr evaluate env) (cdr clause))))
               ((equal? '< clause-op) (apply < (map (curryr evaluate env) (cdr clause))))
               ((equal? '<= clause-op) (apply <= (map (curryr evaluate env) (cdr clause))))
               ((equal? 'null? clause-op) (apply null? (map (curryr evaluate env) (cdr clause))))
               ((equal? 'list? clause-op) (apply list? (map (curryr evaluate env) (cdr clause))))
               ((equal? 'equal? clause-op) (apply equal? (map (curryr evaluate env) (cdr clause))))
               ((equal? '= clause-op) (apply = (map (curryr evaluate env) (cdr clause))))
               ((equal? 'list clause-op) (apply list (map (curryr evaluate env) (cdr clause))))
               ((equal? 'cons clause-op) (apply cons (map (curryr evaluate env) (cdr clause))))
               ((equal? 'car clause-op) (apply car (map (curryr evaluate env) (cdr clause))))
               ((equal? 'cdr clause-op) (apply cdr (map (curryr evaluate env) (cdr clause))))
               ((equal? 'quote clause-op) (car (cdr clause)))
               ((equal? 'if clause-op) (handle-if (cdr clause) env))
               ((lambda? clause-op) (handle-lambda (cons clause-op (cdr clause)) env))
               ((equal? 'cond clause-op) (handle-cond (cdr clause) env))
               (else clause))
         )
       )
  ;)
  )

(define (defined-symbol? clause env)
  (assoc clause env)
  )

(define (get-value clause env)
  (let ((clause-value (assoc clause env)))
    (if (list? clause-value)
        (get-func-value (cadr clause-value) (caddr clause-value))
        (cdr clause-value)
        )
    )
  )

(define (get-func-value params body)
  (list 'lambda params body)
  )

(define (handle-if args env)
  (if (evaluate (car args) env)
      (evaluate (cadr args) env)
      (evaluate (caddr args) env)
      )
  )

(define (lambda? clause-op)
  (or
   (equal? 'lambda clause-op)
   (and (list? clause-op)
        (equal? 'lambda (car clause-op))
        )
   )
  )

(define (handle-lambda clause env)
  ;(and
   ;(println clause)
  (if (list? (car clause))
      (calc-lambda (list-ref (car clause) 1) (list-ref (car clause) 2) (cdr clause) env)    
      clause)
  ; )
  )

(define (calc-lambda params body args env)
  ;(and
   ;(println params)
   ;(println args)
   ;(println body)
   (if (null? params)
       (if (nestedBody? body)
           (if (> (length body) 1)
               (calc-lambda params (cdr body) args (add-to-env (list-ref (car body) 1) (cddar body) env))
               (evaluate (car body) env)
               )
           (evaluate body env)
           )
      (calc-lambda (cdr params) (replace-in-clause (car params) (evaluate (car args) env) body) (cdr args) (add-to-env (list (car params)) (evaluate (car args) env) env))
       )
  ;)
  )

(define (nestedBody? body)
  (and
   (list? (car body))
   (or (= (length body) 1)
       (equal? 'define (caar body))
       )
   )
  )

(define (replace-in-clause param value clause)
  (if (null? clause)
      '()
      (if (and
           (non-empty-list? clause)
           (non-empty-list? (cdr clause))
           (definition-with-same-name-parameter? param (car clause) (cadr clause)))
          clause
          (if (atom? clause)
              (replace-if-match param value clause)
              (cons (replace-in-clause param value (car clause)) (replace-in-clause param value (cdr clause)))
              )
          )
      )
  )

(define (definition-with-same-name-parameter? param clauseType clauseParams)
  (if (or
       (equal? clauseType 'define)
       (equal? clauseType 'lambda)
       )
      (if (list? clauseParams)
          (member param clauseParams)
          #f
          )
      #f
      )
  )

(define (replace-if-match param value atom)
  (if (equal? atom param)
      value
      atom
      )
  )

(define (handle-cond cases env)
  (if (= (length cases) 1)
      (evaluate (cadar cases) env)
      (if (evaluate (caar cases) env)
          (evaluate (cadar cases) env)
          (handle-cond (cdr cases) env)
          )
      )
  )



(define code1 '[((lambda (x)
                   ((lambda (x)
                      ((lambda (z) (+ x x)) 4))
                    3)
                   )
                 5)])
(interpret code1)



